Caesar Cipher
def caesar(text, key, chk):
    result=""
    for i in text:
        if i==' ':
            result+=' '
            continue
        if chk == 'e':  
            result+=chr((ord(i)+key-97)%26+97)
        elif chk=='d':
            result+=chr((ord(i)-key-97)%26+97)
    return result

print("Siddhanth Monnappa\t22BCE3061")
while(True):
    print("--CAESAR CIPHER--")
    print("1) Encrypt Text")
    print("2) Decrypt Text")
    print("3) Exit")
    ch=input("Enter your choice: ")
    if ch=='3':
        break
    text=input("Enter PlainText: ")
    text=text.lower()
    key=int(input("Enter Key: "))
    if ch=='1':
        print(f"Caesar Cipher: {caesar(text, key, 'e')}")
    elif ch=='2':
        print(f"Decyphered PlainText: {caesar(text, key, 'd')}")


Hill Cipher
def format_text(text):
    text=text.upper().replace(" ", "")
    if len(text)%2!=0:
        text+="X"
    return text

def numeric_value(text):
    numbers=[]
    for char in text:
        if char.isalpha():
            numbers.append(ord(char)-ord("A"))
    return numbers

def key_to_matrix(key):
    key=key.upper().replace(" ", "")
    if len(key) < 4:
        print("Key Must be atleast 4 characters long")
        exit()
    key=key[:4]
    key_numbers=numeric_value(key)
    return [[key_numbers[0], key_numbers[1]],[key_numbers[2], key_numbers[3]],]

def num_to_text(num):
    text=""
    for n in num:
        text+=chr(n+ord("A"))
    return text

def mod_inverse(a, m):
    for i in range(1, m):
        if (a*i)%m==1:
            return i
    return None

def matrix_multiply(matrix1, matrix2):
    result=[]
    for i in range(0, len(matrix1), 2):
        row_result=[]
        for j in range(2):
            result_val=sum(matrix1[i+x]*matrix2[x][j] for x in range(2))%26
            row_result.append(result_val)
        result.extend(row_result)
    return result

def inverse_matrix(key_matrix):
    det=(key_matrix[0][0]*key_matrix[1][1]-key_matrix[0][1]*key_matrix[1][0])%26
    inv_det=mod_inverse(det, 26)
    if inv_det is None:
        return None

    adj_mat=[[key_matrix[1][1], -key_matrix[0][1]],[-key_matrix[1][0], key_matrix[0][0]],]

    for i in range(2):
        for j in range(2):
            adj_mat[i][j]=adj_mat[i][j]%26

    inv_mat=[[(inv_det*adj_mat[i][j])%26 for j in range(2)]for i in range(2)]
    return inv_mat

def encrypt(text, key):
    text=format_text(text)
    key_matrix=key_to_matrix(key)
    num=numeric_value(text)
    result_numbers=matrix_multiply(num, key_matrix)
    result_text=num_to_text(result_numbers)
    return result_text

def decrypt(text, key):
    text=format_text(text)
    key_matrix=key_to_matrix(key)
    key_matrix=inverse_matrix(key_matrix)
    if key_matrix is None:
        return "Key matrix is not invertible"
    num=numeric_value(text)
    result_numbers=matrix_multiply(num, key_matrix)
    result_text=num_to_text(result_numbers)
    return result_text

print("Siddhanth Monnappa\t22BCE3061\n")
while(True):
    print("--HILL CIPHER--")
    print("1) Encrypt Text")
    print("2) Decrypt Text")
    print("3) Exit")
    ch=int(input("Enter Choice: "))
    if ch==3:
        break
    key = input("Enter an alphabetic key (min 4 characters): ")
    text = input("Enter the text: ")
    if (ch==1):
        print(f"Ciphertext: {encrypt(text, key)}")
    elif (ch==2):
        print(f"Decrypted Text: {decrypt(text, key)}")


Vigenere Cipher
def generate_key(text, key):
    key=key.upper()
    ext_key=""
    key_index=0

    for char in text:
        if char.isalpha():
            ext_key+=key[key_index%len(key)]
            key_index+=1
        else:
            ext_key+=char
    return ext_key

def vigenere(text, key, chk):
    result=""
    key=generate_key(text, key)

    for i, char in enumerate(text):
        if char.isalpha():
            base=ord('A') if char.isupper() else ord('a')
            key_shift=ord(key[i].upper())-ord('A')
            if chk=="e":
                result+=chr((ord(char)-base+key_shift)%26+base)
            else:
                result+=chr((ord(char)-base-key_shift)%26+base)
        else:
            result+=char

    return result

print("Siddhanth Monnappa\t22BCE3061\n")
while(True):        
    print("--VIGENERE ENCRYPTION--")
    print("1) Encrypt Text")
    print("2) Decrypt Text")
    print("3) Exit")
    ch=int(input("Enter Choice: "))
    if ch==3:
        break
    text = input("Enter the text: ")
    key = input("Enter the key: ")

    if ch==1:
        print(f"Encrypted: {vigenere(text,key,"e")}")
    elif ch==2:
        print(f"Decrypted: {vigenere(text,key,"d")}")


Playfair Cipher
def encrypt(key_matrix, d):  
        a, b = d  
        row_a, col_a=divmod(key_matrix.index(a), 5)  
        row_b, col_b=divmod(key_matrix.index(b), 5)  
              
        if row_a==row_b:  
            col_a=(col_a+1)%5  
            col_b=(col_b+1)%5  
        elif col_a==col_b:
            row_a=(row_a+1)%5  
            row_b=(row_b+1)%5  
        else: 
            col_a, col_b=col_b, col_a  
              
        return key_matrix[row_a*5+col_a]+key_matrix[row_b*5+col_b]  

def decrypt(key_matrix, d):  
        a, b = d  
        row_a, col_a=divmod(key_matrix.index(a), 5)  
        row_b, col_b=divmod(key_matrix.index(b), 5)  
              
        if row_a==row_b: 
            col_a=(col_a-1)%5  
            col_b=(col_b-1)%5  
        elif col_a==col_b:
            row_a=(row_a-1)%5  
            row_b=(row_b-1)%5  
        else:
            col_a, col_b=col_b, col_a  
              
        return key_matrix[row_a*5+col_a]+key_matrix[row_b*5+col_b]  
      
print("Siddhanth Monnappa\t22BCE3061\n")
while(True):
    print("--PLAYFAIR ENCRYPTION--")
    print("1) Encrypt Text")
    print("2) Decrypt Text")
    print("3) Exit")
    ch=int(input("Enter Choice: "))
    if ch==3:
        break
    text=input("Enter Text: ")
    key=input("Enter Key: ")  

    alpha='abcdefghiklmnopqrstuvwxyz'  
    key=key.lower().replace(' ', '').replace('j', 'i')  

    key_matrix=''  
    for alp in key+alpha:  
        if alp not in key_matrix:  
            key_matrix+=alp  
          
    text=text.lower().replace(' ', '').replace('j', 'i')  
    if len(text)%2==1:  
        text+='x'  
            
    digraph=[text[i:i+2] for i in range(0, len(text), 2)]  
      
    result=''
    if(ch==1):
        for d in digraph:
            result+=encrypt(key_matrix,d)  
        print("Ciphertext:", result)  
    elif(ch==2):
        for d in digraph:
            result+=decrypt(key_matrix,d)  
        print("Decrypted text:", result)  
    

Fast Expnenentiation

a=int(input("Enter base: "))
i=int(input("Enter exponent: "))
n=int(input("Enter modulo: "))
i_bin = bin(i)[2:]
print(f"Binary representation of x: {i_bin}")
y=1
print("y=a^x mod n\ta=a^2 mod n")
for bit in i_bin[::-1]:
    if bit=='1':
        y=(a*y)%n
    a=(a*a)%n
    print(f"y={y}\ta={a}")
print(f"Fast Exponentiation Result: {y}")

Extended Euclid GCD
r1=int(input("Enter a value: "))
r2=int(input("Enter b value: "))
s1=1
s2=0
t1=0
t2=1
print(f"r1: {r1}\tr2: {r2}\ts1: {s1}\ts2: {s2}\tt1: {t1}\tt2: {t2}")
while(r2>0):
    q=r1//r2

    r=r1-q*r2
    r1=r2
    r2=r

    s=s1-q*s2
    s1=s2
    s2=s

    t=t1-q*t2
    t1=t2
    t2=t
    print(f"r1: {r1}\tr2: {r2}\ts1: {s1}\ts2: {s2}\tt1: {t1}\tt2: {t2}")

d=r1
s=s1
t=t1

print(f"gcd = d value: {d}")
print(f"s value: {s}")
print(f"t value: {t}")

Extended Euclid Multiplicative Inverse
def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)

a=int(input("Enter a value: "))
n=int(input("Enter n value: "))
if(gcd(a,n)!=1):
    print("Extended Euclidean's Multiplicative Inverse not possible")
    exit()
r1=n
r2=a
t1=0
t2=1
print(f"r1: {r1}\tr2: {r2}\tt1: {t1}\tt2: {t2}")
while(r2>0):
    q=r1//r2
    r=r1-q*r2
    r1=r2
    r2=r

    t=t1-q*t2
    t1=t2
    t2=t
    print(f"r1: {r1} \tr2: {r2}\tt1: {t1}\tt2: {t2}")

if(r1==1):
    if(t1<0):
        t=t1+t2
    else:
        t=t1

print(f"Multiplicative inverse of {a} mod {n} = {t}")

Multiplicative Inverse Eulers Theorem
def gcd(a,b):
        if(b==0):
            return a
        else:
            return gcd(b,a%b)
def phi(n):
    res=1
    for i in range(2,n):
        if(gcd(n,i)==1):
            res+=1
    return res


a=int(input("Enter a value: "))
m=int(input("Enter m value: "))
if(gcd(a,m)!=1):
    print("Euler's Multiplicative Inverse not possible")
    exit()
a_inv=a**(phi(m)-1)%m
print(f"Multiplicative Inverse using Euler's Theorm: {a_inv}")

Multiplicative Inverse Fermats Theorem
def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)

a=int(input("Enter a value: "))
n=int(input("Enter n value: "))
for i in range(2,n//2):
    if(n%i==0):
        print("Not possible using Fermat's Inverse")
        exit()
if(gcd(a,n)!=1):
    print("Not possible using Fermat's Inverse")
    exit()
a_inv=a**(n-2)%n
print(f"Multiplicative Inverse using Fermat's Theorm: {a_inv}")

Chinese Remainder Theorem
n = int(input("Enter the number of equations: "))

a = []
m = []
for i in range(n):
    a.append(int(input(f"Enter a{i+1}: ")))
    m.append(int(input(f"Enter m{i+1}: ")))

M = 1
for mi in m:
    M *= mi

x = 0
for i in range(n):
    Mi = M//m[i]
    try:
        Mi_inv = pow(Mi, -1, m[i])
    except:
        print("Inverse does not exist")
        exit()
    x += a[i] * Mi * Mi_inv

x = x % M
print(f"The solution x is: {x}")

Miller Rabin Primality Test
n = int(input("Enter n value: "))
a = int(input("Enter Base value:"))

n_minus=n-1
k=0
while n_minus%2==0:
    n_minus//=2
    k+=1

m=(n-1)//(2**k)
T=pow(a,m,n)

def miller_rabin_test(T):
    if T==1 or T==n-1:
        return "Prime"
    
    for i in range(k - 1):
        T = pow(T, 2, n)
        if T == n - 1:
            return "Prime"
        if T == 1:
            return "Composite"
    
    return "Composite"

print(f"{n} is a {miller_rabin_test(T)} number")

SDES P-Box S-Box Testing
def p_box(table, bits):
    permuted_bits = "".join(bits[i - 1] for i in table)
    return permuted_bits


def s_box(table, bits):
    row = int(bits[0] + bits[3], 2)
    col = int(bits[1] + bits[2], 2)
    substituted_bits = format(table[row][col], "02b")
    return substituted_bits


print("Name -> Tanishq Anand\nRegistration Number -> 22BCE0508")

p_table = list(map(int, input("Enter The P-Box Table (space-separated) -> ").split()))
s_table = []
print("Enter The S-Box Table (4x4) Row-Wise ->")
for _ in range(4):
    s_table.append(list(map(int, input().split())))

input_bits = input("Enter The Input Bits For P-Box -> ")
p_result = p_box(p_table, input_bits)
print(f"Result -> Permuted Bits [{p_result}]")

s_input_bits = input("Enter The 4 Bits For S-Box -> ")
s_result = s_box(s_table, s_input_bits)
print(f"Result -> Substituted Bits [{s_result}]")

SDES Round Key Generation
def permute(original, permutation):
    return [original[i - 1] for i in permutation]  # Adjust index to be 0-based


def left_shift(bits, shift_count):
    return bits[shift_count:] + bits[:shift_count]


def generate_round_keys(key, P10, P8):
    LS1, LS2 = 1, 2
    
    permuted_key = permute(key, P10)
    
    left_half, right_half = permuted_key[:5], permuted_key[5:]
    left_half, right_half = left_shift(left_half, LS1), left_shift(right_half, LS1)
    
    round_key1 = permute(left_half + right_half, P8)
    
    left_half, right_half = left_shift(left_half, LS2), left_shift(right_half, LS2)
    round_key2 = permute(left_half + right_half, P8)
    
    return round_key1, round_key2


key_input = input("10-bit key: ")
key = [int(bit) for bit in key_input]

P10_input = input("P10 (10 nums): ")
P10 = [int(x) for x in P10_input.split()]

P8_input = input("P8 (8 nums): ")
P8 = [int(x) for x in P8_input.split()]

round_key1, round_key2 = generate_round_keys(key, P10, P8)

print("Key 1:", round_key1)
print("Key 2:", round_key2)

SDES Encryption and Decryption
def permute(original, permutation):
    return [original[i] for i in permutation]

def left_shift(bits, shift_count):
    return bits[shift_count:] + bits[:shift_count]

def generate_keys(key, P10, P8, LS1, LS2):
    key = permute(key, P10)
    left, right = key[:5], key[5:]
    left, right = left_shift(left, LS1), left_shift(right, LS1)
    key1 = permute(left + right, P8)
    left, right = left_shift(left, LS2), left_shift(right, LS2)
    key2 = permute(left + right, P8)
    return key1, key2

def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def sbox(input_bits, sbox):
    row = (input_bits[0] << 1) + input_bits[3]
    col = (input_bits[1] << 1) + input_bits[2]
    return [int(x) for x in format(sbox[row][col], '02b')]

def f_k(bits, key, EP, S0, S1, P4):
    left, right = bits[:4], bits[4:]
    right_expanded = permute(right, EP)
    xor_result = xor(right_expanded, key)
    sbox_output = sbox(xor_result[:4], S0) + sbox(xor_result[4:], S1)
    p4_result = permute(sbox_output, P4)
    return xor(left, p4_result) + right

def sdes_encrypt_decrypt(text, key1, key2, IP, IP_inv, EP, S0, S1, P4, mode='encrypt'):
    text = permute(text, IP)
    if mode == 'encrypt':
        text = f_k(text, key1, EP, S0, S1, P4)
        text = text[4:] + text[:4]
        text = f_k(text, key2, EP, S0, S1, P4)
    else:
        text = f_k(text, key2, EP, S0, S1, P4)
        text = text[4:] + text[:4]
        text = f_k(text, key1, EP, S0, S1, P4)
    return permute(text, IP_inv)

def get_permutation(prompt, length):
    return list(map(lambda x: int(x) - 1, input(prompt).split()))

def get_sbox_values():
    sbox = []
    for i in range(4):
        row = list(map(lambda x: int(x, 2), input(f"Row {i}: ").split()))
        sbox.append(row)
    return sbox

print("Enter IP permutation (e.g., 1 5 2 0 3 7 4 6):")
IP = get_permutation("> ", 8)
print("Enter IP⁻¹ permutation (e.g., 3 0 2 4 6 1 7 5):")
IP_inv = get_permutation("> ", 8)
print("Enter EP permutation (e.g., 3 0 1 2 1 2 3 0):")
EP = get_permutation("> ", 8)
print("Enter P4 permutation (e.g., 1 3 2 0):")
P4 = get_permutation("> ", 4)

print("Enter S0 values (4 rows, space-separated):")
S0 = get_sbox_values()
print("Enter S1 values (4 rows, space-separated):")
S1 = get_sbox_values()

print("Enter P10 permutation (e.g., 2 4 1 6 3 9 0 8 7 5):")
P10 = get_permutation("> ", 10)
print("Enter P8 permutation (e.g., 5 2 6 3 7 4 9 8):")
P8 = get_permutation("> ", 8)
LS1 = int(input("Enter number of left shifts for LS1 (e.g., 1): "))
LS2 = int(input("Enter number of left shifts for LS2 (e.g., 3): "))

key = list(map(int, list(input("Enter 10-bit key (e.g., 1010000010): "))))
plaintext = list(map(int, list(input("Enter 8-bit plaintext (e.g., 10101010): "))))

key1, key2 = generate_keys(key, P10, P8, LS1, LS2)
ciphertext = sdes_encrypt_decrypt(plaintext, key1, key2, IP, IP_inv, EP, S0, S1, P4, mode='encrypt')
decrypted_text = sdes_encrypt_decrypt(ciphertext, key1, key2, IP, IP_inv, EP, S0, S1, P4, mode='decrypt')

print("Plaintext:    ", plaintext)
print("Ciphertext:   ", ciphertext)
print("Decrypted Text:", decrypted_text)

RC4
PT=input("Enter Plaintext: ")
K=input("Enter Key: ")
n=int(input("Enter n: "))

S=[i for i in range(0,2**n)]
P=[PT[i:i+n] for i in range(0,len(PT),n)]
T=[K[i:i+n] for i in range(0,len(K),n)]

for i in range(len(P)):
    P[i]=int(P[i],2)
for i in range(len(T)):
    T[i]=int(T[i],2)

dif=len(S)-len(T)
for i in range(0,dif):
    T.append(T[i])

print("S:"+ S)
print("T:"+T)

j=0
print("KSA iterations: ")
for i in range(len(S)):
    j=(j+S[i]+T[i]) % len(S)
    S[i],S[j]=S[j],S[i]
    print(i+" "+S)

i=j=t=0
K_stream=[]
print("PRGA iterations: ")
while(i<len(P)):
    i=(i+1) % len(S)
    j=(j+S[i]) % len(S)
    S[i],S[j]=S[j],S[i]
    print(i+" "+S)
    t=(S[i]+S[j]) % len(S)
    K_stream.append(S[t])
print(K_stream)

cipher=[]
for i in range(len(P)):
    cipher.append(P[i]^K_stream[i]) # Decryption: original.append(cipher[i]^K_stream[i])

cipher_text = ""
for i in cipher:
    cipher_text+='0'*(n-len(bin(i)[2:]))+bin(i)[2:]

print("Cipher text: ",cipher_text)